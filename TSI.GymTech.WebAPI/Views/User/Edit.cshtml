@model TSI.GymTech.Entity.Models.Person

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <title>Usuário - Detalhes</title>
</head>

<!-- WebcamJS library -->
<script src="@Url.Content("~/Scripts/Utility/UserUtility.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/WebCam/webcam.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Utility/WebCamUtility.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "validation-message text-danger" })
        @Html.HiddenFor(model => model.PersonId)
        @Html.HiddenFor(model => model.Photo)

        <div class="edit-container">
            @*Photo and Nav buttons*@
            <div class="col-lg-3 col-md-3 col-sm-12 float-md-right float-lg-right" style="position: relative;">
                <div class="profile-sidebar">
                    <div id="myCam" class="profile-userpic-webcam" style="display: none;">
                    </div>
                    <!-- SIDEBAR USERPIC -->
                    <div id="results" class="d-none"></div>
                    <div id="myPhoto" class="profile-userpic">
                        @{
                            var fileName = Model.Photo;
                            var sourceImage = "/Images/Persons/";
                            var absolutePath = System.Web.HttpContext.Current.Server.MapPath("~/Images/Persons/" + fileName);

                            if (!System.IO.File.Exists(absolutePath) || string.IsNullOrEmpty(fileName))
                            {
                                fileName = "default-user-profile.svg";
                            }

                            sourceImage += fileName;

                            var resetWebcamFunc = "reset_webcam('" + fileName + "')";
                        }
                        <img id="personPhoto" src="@sourceImage" class="img-responsive">
                    </div>
                    <!-- END SIDEBAR USERPIC -->
                    <!-- SIDEBAR USER TITLE -->
                    <div class="profile-usertitle">
                        <div class="profile-usertitle-name">
                            @Model.Name
                        </div>
                        <div class="profile-usertitle-job">
                            @typeof(TSI.GymTech.Entity.App_LocalResources.PersonType).GetProperty(Enum.GetName(typeof(TSI.GymTech.Entity.Enumerates.PersonType), Model.ProfileType)).GetValue(null)
                        </div>
                    </div>

                    <div id="pre_take_buttons" class="profile-userbuttons">
                        <button id="btnAdd" type="button" class="btn btn-dark btn-md" onClick="setup(); $(this).hide();">
                            <i class="fas fa-video fa-2x"></i>
                        </button>
                        <div id="btnUploadPicture" class="btn btn-success btn-file">
                            <i class="fas fa-images  fa-2x"></i>
                            <input id="btnUpload" type="file">
                        </div>
                        <button id="btnRemovePhoto" type="button" class="btn btn-danger btn-sm" style="display:@(sourceImage.IndexOf("default-user-profile.svg") <= 0 ? "":"none")">
                            <i class="fas fa-trash-alt fa-2x"></i>
                        </button>

                        <button id="btnTakePicture" type="button" class="btn btn-dark btn-lg" style="display:none" onClick="preview_snapshot()">
                            <i class="fas fa-camera-retro fa-2x"></i>
                        </button>
                        <button id="btnResetWebcam" type="button" class="btn btn-danger btn-lg" style="display:none" onClick="@resetWebcamFunc">
                            <i class="fas fa-video-slash fa-2x"></i>
                        </button>
                    </div>
                    <div id="post_take_buttons" class="profile-userbuttons" style="display:none">
                        <button id="btnTakeAnother" type="button" class="btn btn-dark btn-lg" onClick="cancel_preview()">
                            <i class="fas fa-undo-alt fa-2x"></i>
                        </button>
                        <button id="btnSavePhoto" type="button" class="btn btn-success btn-lg" onClick="save_photo()">
                            <i class="far fa-save fa-2x"></i>
                        </button>
                        <button type="button" class="btn btn-danger btn-lg" onClick="@resetWebcamFunc">
                            <i class="fas fa-video-slash fa-2x"></i>
                        </button>
                    </div>

                    <!-- SIDEBAR MENU -->
                    <div class="profile-usermenu sidebar-sticky">
                        <ul class="nav flex-column">
                            <li class="nav-item">
                                <a href="#" class="nav-link">
                                    <i class="fa fa-home"></i>
                                    @*Overview*@
                                    Geral
                                </a>
                            </li>
                            <li class="nav-item active">
                                <a href="#" class="nav-link active">
                                    <i class="fa fa-user"></i>
                                    @*Profile Information*@
                                    Dados Pessoais
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">
                                    <i class="fas fa-shopping-cart"></i>
                                    @*Payments*@
                                    Pagamentos
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">
                                    <i class="fas fa-file-invoice"></i>
                                    @*<span>Anamnesis Sheet</span>*@
                                    Fichas de Anamnese
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">
                                    <i class="fas fa-file-contract"></i>
                                    @*<span>Evaluation Sheet</span>*@
                                    Fichas de Avaliação
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">
                                    <i class="fas fa-file-alt"></i>
                                    @*<span>Training Sheet</span>*@
                                    Fichas de Treino
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">
                                    <i class="fas fa-history"></i>
                                    @*<span>Log Access</span>*@
                                    Log de Acesso
                                </a>
                            </li>
                        </ul>
                    </div>
                    <!-- END MENU -->
                </div>
            </div>

            @*Fields and Grid views*@
            <div class="col-lg-9 col-md-9 col-sm-12 col-md-8">
                <div class="profile-content">
                    <h5>Dados Pessoais</h5>
                    <hr />
                    <div class="form-row">
                        <div class="form-group col-12">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } }) <br />
                            </div>
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "validation-message text-danger" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.ProfileType, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-list"></i></span>
                                </div>
                                @Html.EnumDropDownListFor(model => model.ProfileType, htmlAttributes: new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ProfileType, "", new { @class = "validation-message text-danger" })
                        </div>

                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-list"></i></span>
                                </div>
                                @Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "validation-message text-danger" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.NationalIDCard, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-address-card"></i></span>
                                </div>
                                @Html.EditorFor(model => model.NationalIDCard, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.NationalIDCard, "", new { @class = "validation-message text-danger" })
                        </div>
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.SocialSecurityCard, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-id-badge"></i></span>
                                </div>
                                @Html.EditorFor(model => model.SocialSecurityCard, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.SocialSecurityCard, "", new { @class = "validation-message text-danger" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                </div>
                                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "validation-message text-danger" })
                        </div>
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.RegistrationDate, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                </div>
                                @Html.EditorFor(model => model.RegistrationDate, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.RegistrationDate, "", new { @class = "validation-message text-danger" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                </div>
                                @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "validation-message text-danger" })
                        </div>
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-list"></i></span>
                                </div>
                                @Html.EnumDropDownListFor(model => model.Status, htmlAttributes: new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "validation-message text-danger" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-phone"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "validation-message text-danger" })
                        </div>
                        <div class="form-group col-md-6 col-sm-12">
                            @Html.LabelFor(model => model.MobilePhone, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="input-group col-md-12">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-mobile"></i></span>
                                </div>
                                @Html.EditorFor(model => model.MobilePhone, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.MobilePhone, "", new { @class = "validation-message text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="input-group col-md-12">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                            </div>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "validation-message text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "validation-message text-danger" })
                    </div>

                    <div class="form-row">
                        <div class="col-6 mt-2">
                            @Html.ActionLink("Voltar para Lista de Usuários", "Index")
                        </div>
                        <div class="col-6 text-right">
                            <input id="btnSaveUser" type="submit" value="Salvar" class="btn btn-success align-content-end" />
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}